# interpreter for shell commands (needs to be POSIX compatible)
set shell zsh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu:--shwordsplit'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

set scrolloff 10
set icons
set incsearch

cmd open &{{
    case $(file --mime-type --brief "$f") in
    text/* || */json) lf -remote "send $id $\"$EDITOR\" \"$f\"" ;;
    *) $OPENER "$f" ;;
    esac
}}

# zoxide wrappers
cmd z %lf -remote "send $id cd '$(zoxide query $@)'"
cmd zi $lf -remote "send $id cd '$(zoxide query --interactive $@)'"

# konsole wrapper
cmd tabnew &konsole --new-tab -e lf $PWD

# habits die hard
cmd q :quit

# use . to toggle dotfiles visibility, like nnn
map . set hidden!

# preview files
set previewer lf-preview
map i $lf-preview $f | less -R

# move current file or selected files to trash folder
cmd trash &kioclient5 move $fx trash:/ && lf -remote "send $id reload"
map D trash

# execute current file (must be executable)
map x $$f
map X !$f

# Yank the full path of a file
cmd yank-path $echo "$f" | xclip -selection clipboard -in

# Copy a file to the system clipboard
map <c-c> $echo "file://$f" | xclip -selection clipboard -in -target text/uri-list

# jump to directory using fzf
cmd fzf-jump ${{
   res="$(fd -aH | fzf --reverse --header='Jump to location')"
   if [ -f "$res" ]; then
     cmd="select"
   elif [ -d "$res" ]; then
     cmd="cd"
   fi
lf -remote "send $id $cmd \"$res\""
}}
map <c-f> :fzf-jump

# Create symlinks
cmd link %{{
    lf -remote 'load' | while read file; do
        if [ ! -n "${mode+1}" ]; then
            mode="$file"
            continue
        fi
        files+=("$file")
    done
    if [ "${#files[@]}" -le 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    # symbolically copy mode is indicating a soft link
    if [[ "$mode" == copy ]]; then
        ln -sr $files -t .
    # while a move mode is indicating a hard link
    elif [[ "$mode" == move ]]; then
        ln $files -t .
    fi
}}
map P :link

cmd vidir ${{
    printf '%s\n' "$fx" | vidir -
    lf -remote "send $id unselect"
}}

# Rename without changing the extension
map R :rename; cmd-word-back; cmd-left

# preview an image
map I ${{
    mime_type=$(file -bi $f)
    if [[ $mime_type != image/* ]]; then
        lf -remote "send $id echoerr 'Not an image'"
        exit
    fi

    display $f
}}
