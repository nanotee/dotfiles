# interpreter for shell commands (needs to be POSIX compatible)
set shell zsh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu:--shwordsplit'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"


set scrolloff 10
set icons
set incsearch
set hiddenfiles ".*:~/snap"

# zoxide wrappers
cmd z %{{
    dir=$(zoxide query "$@")
    if [[ -e $dir ]]; then
        lf -remote "send $id cd \"$dir\""
        zoxide add "$dir"
    fi
}}

cmd zi ${{
    dir=$(zoxide query --interactive "$@")
    if [[ -e $dir ]]; then
        lf -remote "send $id cd \"$dir\""
        zoxide add "$dir"
    fi
}}

cmd za %zoxide add "$@"
cmd zr %zoxide remove "$@"

# konsole wrapper
cmd tabnew &konsole --new-tab -e $(which lf) $PWD
map <c-t> tabnew

# habits die hard
cmd q :quit

# use . to toggle dotfiles visibility, like nnn
map . set hidden!

# preview files
set previewer ~/.config/lf/pv.sh
map i $~/.config/lf/pv.sh $f | less -R

# move current file or selected files to trash folder
cmd trash $kioclient5 move $fx trash:/
map D trash

# execute current file (must be executable)
map x $$f
map X !$f

# Yank the full path of a file
cmd yank-path $echo "$f" | xclip -selection clipboard -in

# Copy a file to the system clipboard
map <c-c> $echo "file://$f" | xclip -selection clipboard -in -target text/uri-list

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# jump to directory using fzf
cmd fzf-jump ${{
   res="$(fd -aH | fzf --reverse --header='Jump to location')"
   if [ -f "$res" ]; then
     cmd="select"
   elif [ -d "$res" ]; then
     cmd="cd"
   fi
lf -remote "send $id $cmd \"$res\""
}}
map <c-f> :fzf-jump

# Create symlinks
cmd link %{{
    lf -remote 'load' | while read file; do
        if [ ! -n "${mode+1}" ]; then
            mode="$file"
            continue
        fi
        files+=("$file")
    done
    if [ "${#files[@]}" -le 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    # symbolically copy mode is indicating a soft link
    if [[ "$mode" == copy ]]; then
        ln -sr $files -t .
    # while a move mode is indicating a hard link
    elif [[ "$mode" == move ]]; then
        ln $files -t .
    fi
}}
map P :link

cmd bulk-rename !{{
    old=$(mktemp)
    new=$(mktemp)
    [ -n $fs ] && fs=$(ls)
    printf "$fs\n" > $old
    printf "$fs\n" > $new
    $EDITOR $new
    [ $(cat $new | wc -l) -ne $(cat $old | wc -l) ] && exit
    paste $old $new | while read names; do
        src=$(printf $names | cut -f1)
        dst=$(printf $names | cut -f2)
        [ $src = $dst ] && continue
        [ -e $dst ] && continue
        mv $src $dst
    done
    rm $old $new
    lf -remote "send $id unselect"
}}

# Rename without changing the extension
map R :rename; cmd-word-back; cmd-left

map I ${{
    # Get a file's mime_type.
    mime_type=$(file -bi $f)

    # File isn't an image file, give warning.
    if [[ $mime_type != image/* ]]; then
        lf -remote "send $id echoerr 'Not an image'"
        exit
    fi

    display $f
}}

# Implementation of Shdo from vim-dirvish
cmd shdo !{{
    script=$(mktemp)
    [ -n $fs ] && fs=$(ls)
    for file in $fs; do
        echo "$@" | sed "s{}$fileg" >> $script
    done
    $EDITOR $script
    printf "Run script? y/n: "
    read answer
    case $answer in
    [yY])
        paste $script | sh
        ;;
    *)
    esac
    rm $script
    lf -remote "send $id unselect"
}}
