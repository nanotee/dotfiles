# interpreter for shell commands (needs to be POSIX compatible)
set shell zsh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# display nerdfont icons
set icons

# habits die hard
cmd q :quit
map <esc> :quit

# use . to toggle dotfiles visibility, like nnn
map . set hidden!

# preview files
set previewer ~/.config/lf/pv.sh
map i $~/.config/lf/pv.sh $f | less -R

# use the delete key to delete
map D delete

# execute current file (must be executable)
map x $$f
map X !$f

# move current file or selected files to trash folder
cmd trash %trash-put $f

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# jump to directory using fzf
cmd fzf_jump ${{
   res="$(fd -aH | fzf --reverse --header='Jump to location')"
   if [ -f "$res" ]; then
     cmd="select"
   elif [ -d "$res" ]; then
     cmd="cd"
   fi
lf -remote "send $id $cmd \"$res\""
}}
map <c-f> :fzf_jump

# Create symlinks
cmd Link %{{
    lf -remote 'load' | while read file; do
        if [ ! -n "${mode+1}" ]; then
            mode="$file"
            continue
        fi
        files+=("$file")
    done
    if [ "${#files[@]}" -le 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    # symbolically copy mode is indicating a soft link
    if [[ "$mode" == copy ]]; then
        ln -sr $files -t .
    # while a move mode is indicating a hard link
    elif [[ "$mode" == move ]]; then
        ln $files -t .
    fi
}}
map P :Link

# taken from https://github.com/gokcehan/lf/pull/157/files
cmd bulk-rename !{{
    tmp() { umask 077; mktemp /tmp/lf-bulkrename-index.XXXXXXXXXX; }
    index_a="$(tmp)"
    index_b="$(tmp)"
    trap 'rm "$index_a" "$index_b"' EXIT INT QUIT
    if [ -n "${fs:-}" ]; then
        printf '%s\n' "$fs" > "$index_a"
    else
        ls -1Ap > "$index_a"
    fi
    cat "$index_a" > "$index_b"
    "$EDITOR" "$index_b"
    if [ "$(wc -l "$index_a" "$index_b" |
        awk 'NR==1 {a=$1} NR==2 {b=$1} END {print a-b}' )" -ne 0 ]; then
        echo "Number of lines must stay the same." >&2
        exit 1
    fi
    tty="$(tty)"
    line=0
    paste -d "\n" "$index_a" "$index_b" | while read -r name; do
        : $((line += 1))
        if [ $((line % 2)) -eq 1 ]; then
            a="$name"; continue
        else
            b="$name"
        fi
        [ "$a" = "$b" ] && continue
        mv -vi -- "$a" "$b" < "$tty"
    done
}}

# Rename without changing the extension
map R :rename; cmd-word-back; cmd-left

map I ${{
    # Get a file's mime_type.
    mime_type=$(file -bi $f)

    # File isn't an image file, give warning.
    if [[ $mime_type != image/* ]]; then
        lf -remote "send $id echoerr 'Not an image'"
        exit
    fi

    display $f
}}
